{"version":3,"sources":["components/Worker.js","misc.js","components/WorkerList.js","components/Multiplier.js","components/MultiplierList.js","App.js","index.js"],"names":["ACTIONS","reducer","state","action","type","productionRate","productionRateCost","owned","payload","cost","Worker","worker","money","setMoney","multiplier","useReducer","dispatch","useState","visible","setVisible","reveal","prevVisible","useEffect","setInterval","prevMoney","className","name","productionRateUpgradeCost","onClick","totalCost","BuyWorker","tabIndex","style","display","defaultCost","defaultProductionRate","defaultProductionRateUpgradeCost","this","OWNED_LOCAL_STORAGE_KEY","COST_LOCAL_STORAGE_KEY","UPGRADE_CAP_LOCAL_STORAGE_KEY","CURRENT_PRODUCTION_RATE_LOCAL_STORAGE_KEY","CURRENT_PRODUCTION_RATE_UPGRADE_COST_LOCAL_STORAGE_KEY","saveFiles","key","value","forEach","save","localStorage","setItem","JSON","stringify","Workers","WorkerList","id","map","index","Multiplier","amount","setMultiplier","for","MultiplierList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7046ea3c.chunk.js","sourcesContent":["import React, {useEffect, useState, useReducer} from 'react';\nconst ACTIONS = {\n    Upgrade: \"UpgradeWorker\",\n    Buy: \"BuyWorker\",\n    Mining: \"MiningWorker\",\n}\nfunction reducer(state, action) {\n    switch(action.type) {\n        case ACTIONS.Upgrade:\n            return {\n                ...state,\n                productionRate: state.productionRate + 1, \n                productionRateCost: state.productionRateCost * 2, \n            }\n        case ACTIONS.Buy:\n            return {\n                ...state,\n                owned: state.owned + action.payload,\n                cost: state.cost + action.payload, \n            }\n        case ACTIONS.Mining:\n            // \n            return {\n                ...state,\n            }\n        default: return state\n    }\n}\n\nexport default function Worker({worker, money, setMoney, multiplier}) {\n    // set default state to worker and pass reducer function\n    const [state, dispatch] = useReducer(reducer, worker);\n    const miningSpeed = 5000;\n    const [visible, setVisible] = useState(true);\n    const reveal = () => {\n        setVisible(prevVisible => !prevVisible)\n    }\n    const BuyWorker = () => {\n        const totalCost = state.cost * multiplier;\n        if (money < totalCost) return;\n        setMoney(prevMoney => prevMoney - totalCost);\n        dispatch({type: ACTIONS.Buy, payload: multiplier})\n    }\n    const UpgradeWorker = () => {\n        if (money < state.productionRateUpgradeCost) return;\n        setMoney(prevMoney => prevMoney - state.productionRateUpgradeCost);\n        dispatch({type: ACTIONS.Upgrade})\n    }\n    useEffect(() => {\n        setInterval(() => {\n            setMoney(prevMoney => prevMoney + (state.owned * state.productionRate))\n        }, miningSpeed)\n    }, [state])\n    return (\n        <div className=\"worker\">\n            <h2 className=\"worker-name\">{state.name}</h2>\n             <div className={ visible ? \"visible\" : \"hidden\"}>\n                <h2>Owned: <span>{state.owned}</span></h2>\n                <h2>Cost: <span>{state.cost * multiplier}</span>$</h2>\n                <h2>Production Rate: <span>{state.productionRate}</span>$</h2>\n                <h2>Upgrade Cost: <span>{state.productionRateUpgradeCost}</span></h2>\n                <button onClick={() => BuyWorker()}>Buy <span>{multiplier}</span>?</button>\n                <button onClick={() => UpgradeWorker()}>Upgrade?</button>\n            </div>\n            <div>\n                <button \n                    tabIndex=\"0\"\n                    style={{\n                        display: visible ? \"block\" : \"none\",\n                    }}\n                    onClick={() => reveal()}\n                >\n                    Minimize\n                </button>\n                <button \n                    tabIndex=\"0\"\n                    style={{\n                        display: visible ? \"none\" : \"block\",\n                    }}\n                    onClick={() => reveal()}\n                >\n                    Reveal\n                </button>\n            </div>\n        </div>\n    )\n}\n","\nclass Worker {\n  constructor(\n    defaultCost,\n    defaultProductionRate, \n    defaultProductionRateUpgradeCost, \n    name\n    ) {\n        \n      // storage keys\n      this.OWNED_LOCAL_STORAGE_KEY = `Coalminer.${name}Owned`;\n      this.COST_LOCAL_STORAGE_KEY = `Coalminer.${name}Cost`;\n      this.UPGRADE_CAP_LOCAL_STORAGE_KEY = `Coalminer.${name}CapLimit`;\n      this.CURRENT_PRODUCTION_RATE_LOCAL_STORAGE_KEY = `Coalminer.${name}CurrentProductionRate`;\n      this.CURRENT_PRODUCTION_RATE_UPGRADE_COST_LOCAL_STORAGE_KEY = `Coalminer.${name}CurrentProductionRateUpgradeCost`;\n      \n      this.name = name;\n      this.owned = 0;\n      this.cost = defaultCost;\n      this.productionRate = defaultProductionRate;\n      this.productionRateUpgradeCost = defaultProductionRateUpgradeCost;\n      this.saveFiles = [\n        {\n          key: this.OWNED_LOCAL_STORAGE_KEY,\n          value: this.owned\n        },\n        {\n          key: this.COST_LOCAL_STORAGE_KEY,\n          value: this.cost\n        },\n        {\n          key: this.CURRENT_PRODUCTION_RATE_LOCAL_STORAGE_KEY,\n          value: this.productionRate\n        },\n        {\n          key: this.CURRENT_PRODUCTION_RATE_UPGRADE_COST_LOCAL_STORAGE_KEY,\n          value: this.productionRateUpgradeCost\n        }\n      ]\n    }\n    \n    save() {\n      this.saveFiles.forEach(save => {\n        localStorage.setItem(save.key, JSON.stringify(save.value))\n      })\n    }\n}\n\nconst miners = new Worker(10, 1, 100, \"Miners\")\nconst drills = new Worker(100, 2, 1000, \"Drills\")\nconst Workers = [miners, drills]\nexport default Workers;\n","import React from 'react';\nimport Worker from \"./Worker\";\nimport Workers from \"../misc\";\n\nexport default function WorkerList({ money, setMoney, multiplier}) {\n    return (\n        <div id=\"worker-list\">\n            {Workers.map((worker, index) => {\n                return <Worker worker={worker} money={money} setMoney={setMoney} multiplier={multiplier} key={index} />\n            })}\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Multiplier({amount, setMultiplier}) {\n    return (\n        <label for={`${amount}-multiplier`}>{amount}x\n            <input\n                type=\"radio\"\n                value={amount}\n                id={`${amount}-multiplier`}\n                name=\"multiplier\"\n                onClick={() => {setMultiplier(amount)}}\n            ></input>\n        </label>\n    )\n}\n","import React from 'react'\nimport Multiplier from \"./Multiplier\";\n\nexport default function MultiplierList({setMultiplier}) {\n    return (\n        <div id=\"multiplierContainer\">\n            <fieldset>\n                <legend>Multipliers for buying in mass:</legend>\n                <Multiplier amount={1} setMultiplier={setMultiplier} key=\"1\" />\n                <Multiplier amount={10} setMultiplier={setMultiplier} key=\"10\" />\n                <Multiplier amount={100} setMultiplier={setMultiplier} key=\"100\" />\n            </fieldset>\n        </div>\n    )\n}\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport WorkerList from \"./components/WorkerList\"\n\nimport \"./css/App.css\";\nimport MultiplierList from \"./components/MultiplierList\";\n\nfunction App() {\n  // set everything back to default values based on local save\n  const [money, setMoney] = useState(10\n    // JSON.parse(localStorage.getItem(\"CoalMiner.money\")) || 10\n  );\n  const [multiplier, setMultiplier] = useState(1);\n  // for saving money\n  useEffect(() => {\n    localStorage.setItem(\"CoalMiner.money\", JSON.stringify(money))\n  }, [money])\n\n  return (\n    <>\n      <h1>Coal Miners</h1>\n      <h2>Current Money: {money}</h2>\n      <WorkerList money={money} setMoney={setMoney} multiplier={multiplier} />\n      <MultiplierList setMultiplier={setMultiplier} />\n    </>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}