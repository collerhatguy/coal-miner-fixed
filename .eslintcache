[{"/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/index.js":"1","/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/App.js":"2","/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/components/MultiplierList.js":"3","/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/components/WorkerList.js":"4","/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/components/Multiplier.js":"5","/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/components/Worker.js":"6","/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/misc.js":"7","/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/hooks/useWorker.js":"8"},{"size":197,"mtime":1627086833000,"results":"9","hashOfConfig":"10"},{"size":727,"mtime":1627086833000,"results":"11","hashOfConfig":"10"},{"size":565,"mtime":1627086833000,"results":"12","hashOfConfig":"10"},{"size":529,"mtime":1627086833000,"results":"13","hashOfConfig":"10"},{"size":466,"mtime":1626985983000,"results":"14","hashOfConfig":"10"},{"size":1749,"mtime":1627086833000,"results":"15","hashOfConfig":"10"},{"size":2585,"mtime":1626813490000,"results":"16","hashOfConfig":"10"},{"size":2488,"mtime":1627086833000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14ykkio",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/index.js",[],"/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/App.js",[],["37","38"],"/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/components/MultiplierList.js",[],"/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/components/WorkerList.js",[],"/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/components/Multiplier.js",[],"/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/components/Worker.js",["39","40"],"import React, {useState, useEffect} from 'react';\nimport useWorker from \"../hooks/useWorker\";\n\n\nexport default function Worker({worker, money, setMoney, multiplier}) {\n    const [workerState, progress, BuyWorker, UpgradeWorker] = useWorker(worker, setMoney, money, multiplier);\n    const [affordable, setAffordable] = useState(false)\n    const [visible, setVisible] = useState(true)\n    useEffect(() => {\n        if (worker.cost <= money) setAffordable(true); \n    }, [money])\n    const buy = e => {\n        e.stopPropagation()\n        BuyWorker()\n    }\n    const upgrade = e => {\n        e.stopPropagation()\n        UpgradeWorker()\n    }\n    if (!affordable) return null;\n    return (\n        <div \n            className=\"worker\"\n            onClick={() => setVisible(!visible)}\n            data-cy=\"visibility-btn\">\n            <h3 className=\"worker-name\">{workerState.name}</h3>\n            {visible ? <div data-cy=\"visibility-pnl\" className=\"visible\">\n                <progress data-cy=\"progress\" max={100} value={progress} />\n                <button \n                    data-cy=\"buy\" \n                    onClick={buy}\n                >Buy <span>{multiplier}</span> for <span>{workerState.cost * multiplier}</span>$?</button>\n                <button \n                    onClick={upgrade}\n                >Upgrade for <span>{workerState.productionRateUpgradeCost}</span>$?</button>\n                <img className=\"worker-image\" \n                    src={workerState.img} />\n                <h4>Owned: <span data-cy=\"owned\">{workerState.owned}</span></h4>\n                <h4>Production Rate: <span>{workerState.productionRate}</span>$</h4>\n                <h4>Level: <span>{workerState.level}</span></h4>\n            </div> : null}\n        </div>\n    )\n}\n","/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/misc.js",[],"/Users/jacobshomali/Desktop/projects/coal-miner-fixed/src/hooks/useWorker.js",["41","42","43","44","45"],"import { useReducer, useEffect, useCallback, useState } from \"react\";\n\nconst ACTIONS = {\n    Upgrade: \"UpgradeWorker\",\n    Buy: \"BuyWorker\",\n    Mining: \"MiningWorker\",\n}\nfunction reducer(state, action) {\n    switch(action.type) {\n        case ACTIONS.Upgrade:\n            return {\n                ...state,\n                productionRate: state.productionRate + 1, \n                productionRateUpgradeCost: state.productionRateUpgradeCost * 2,\n                level: state.level + 1, \n            }\n        case ACTIONS.Buy:\n            return {\n                ...state,\n                owned: state.owned + action.payload,\n                cost: state.cost + action.payload, \n            }\n        default: return state;\n    }\n}\nexport default function useWorker(worker, setMoney, money, multiplier) {\n    const [state, dispatch] = useReducer(reducer, worker);\n    const progressSpeed = 50;\n    const [miningTrigger, setMiningTrigger] = useState(0);\n    const [progressTrigger, setProgressTrigger] = useState(0);\n    const [goldMined, setGoldMined] = useState(worker.owned * worker.productionRate);\n    const [lastMinedTime, setLastMinedTime] = useState(Date.now());\n    const [progress, setProgress] = useState(0);\n\n    const BuyWorker = useCallback(() => {\n        const totalCost = state.cost * multiplier;\n        if (money < totalCost) return;\n        setMoney(prevMoney => prevMoney - totalCost);\n        dispatch({type: ACTIONS.Buy, payload: multiplier})\n    }, [state, multiplier, money])\n\n    const UpgradeWorker = useCallback(() => {\n        if (money < state.productionRateUpgradeCost) return;\n        setMoney(prevMoney => prevMoney - state.productionRateUpgradeCost);\n        dispatch({type: ACTIONS.Upgrade})\n    }, [state, money])\n\n    useEffect(() => {\n        setInterval(() => {\n            setMiningTrigger(prevMining => prevMining + 1)\n        }, state.speed)\n        setInterval(() => {\n            setProgressTrigger(prevProgress => prevProgress + 1)\n        }, progressSpeed)\n    }, []);\n\n    useEffect(() => {\n        setMoney(prevMoney => prevMoney + goldMined);\n        setLastMinedTime(Date.now());\n    }, [miningTrigger]);\n\n    useEffect(() => {\n        if (state.owned === 0) return;\n        setProgress(Math.floor(((Date.now() - lastMinedTime) / state.speed) * 100));\n    }, [progressTrigger])\n\n    useEffect(() => {\n        setGoldMined(state.owned * state.productionRate);\n    }, [state]);\n    \n    return [state, progress, BuyWorker, UpgradeWorker];\n}",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":11,"column":8,"nodeType":"52","endLine":11,"endColumn":15,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":36,"column":17,"nodeType":"56","endLine":37,"endColumn":45},{"ruleId":"50","severity":1,"message":"57","line":34,"column":8,"nodeType":"52","endLine":34,"endColumn":34,"suggestions":"58"},{"ruleId":"50","severity":1,"message":"57","line":40,"column":8,"nodeType":"52","endLine":40,"endColumn":22,"suggestions":"59"},{"ruleId":"50","severity":1,"message":"60","line":57,"column":8,"nodeType":"52","endLine":57,"endColumn":10,"suggestions":"61"},{"ruleId":"50","severity":1,"message":"62","line":63,"column":8,"nodeType":"52","endLine":63,"endColumn":23,"suggestions":"63"},{"ruleId":"50","severity":1,"message":"64","line":69,"column":8,"nodeType":"52","endLine":69,"endColumn":25,"suggestions":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'worker.cost'. Either include it or remove the dependency array.","ArrayExpression",["68"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useCallback has a missing dependency: 'setMoney'. Either include it or remove the dependency array. If 'setMoney' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["69"],["70"],"React Hook useEffect has a missing dependency: 'state.speed'. Either include it or remove the dependency array.",["71"],"React Hook useEffect has missing dependencies: 'setMoney', 'state.owned', and 'state.productionRate'. Either include them or remove the dependency array. If 'setMoney' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["72"],"React Hook useEffect has missing dependencies: 'lastMinedTime', 'state.owned', and 'state.speed'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProgress' needs the current value of 'lastMinedTime'.",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [money, worker.cost]",{"range":"86","text":"87"},"Update the dependencies array to be: [state.cost, multiplier, money, setMoney]",{"range":"88","text":"89"},"Update the dependencies array to be: [money, state.productionRateUpgradeCost, setMoney]",{"range":"90","text":"91"},"Update the dependencies array to be: [state.speed]",{"range":"92","text":"93"},"Update the dependencies array to be: [miningTrigger, setMoney, state.owned, state.productionRate]",{"range":"94","text":"95"},"Update the dependencies array to be: [lastMinedTime, progressTrigger, state.owned, state.speed]",{"range":"96","text":"97"},[468,475],"[money, worker.cost]",[1122,1148],"[state.cost, multiplier, money, setMoney]",[1387,1401],"[money, state.productionRateUpgradeCost, setMoney]",[2092,2094],"[state.speed]",[2289,2304],"[miningTrigger, setMoney, state.owned, state.productionRate]",[2535,2552],"[lastMinedTime, progressTrigger, state.owned, state.speed]"]