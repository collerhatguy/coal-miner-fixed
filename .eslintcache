[{"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/index.js":"1","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/App.js":"2","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/misc.js":"3","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/WorkerList.js":"4","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/Worker.js":"5"},{"size":197,"mtime":1610581010000,"results":"6","hashOfConfig":"7"},{"size":1514,"mtime":1617890340000,"results":"8","hashOfConfig":"7"},{"size":1740,"mtime":1617889788000,"results":"9","hashOfConfig":"7"},{"size":346,"mtime":1617890123000,"results":"10","hashOfConfig":"7"},{"size":1412,"mtime":1617890145000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"7tgfm0",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/index.js",[],["24","25"],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/App.js",["26"],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/misc.js",[],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/WorkerList.js",[],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/Worker.js",["27","28","29"],"import React from 'react'\n\nexport default function Worker({worker, money, setMoney, multiplier}) {\n    const buyWorker = (worker) => {\n        const totalCost = worker.cost * multiplier;\n        if (money < totalCost) return;\n        setMoney(money - totalCost);\n        worker.setOwned(prevOwned => {prevOwned += multiplier});\n        worker.setCost(prevCost => {prevCost += multiplier});\n    };\n    const miningWorker = (worker) => {\n        setMoney((prevMoney) => prevMoney + worker.owned * worker.productionRate);\n    };\n    const upgradeWorkerSpeed = (worker) => {\n        // check if we have enough money\n        if (!(money >= worker.speedUpgradeCost)) return;\n        // subtract cost from money \n        setMoney(money - worker.speedUpgradeCost);\n        // apply upgrade based on built in rate\n        worker.speed = worker.speed - worker.speedUpgradeRate;\n        // increase cost of upgrade\n        worker.speedUpgradeCost += worker.speedUpgradeCost;\n        // save our current speed\n        localStorage.setItem(worker.CURRENT_SPEED_LOCAL_STORAGE_KEY, JSON.stringify(worker.speed));\n        // check if we have hit the upgrade limit\n        if (!(worker.speed - worker.speedUpgradeRate <= 0)) return;\n        // if we have than save that\n        localStorage.setItem(worker.UPGRADE_CAP_LOCAL_STORAGE_KEY, JSON.stringify(true))\n    };\n    return (\n        <div>\n            \n        </div>\n    )\n}\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":17,"nodeType":"36","messageId":"37","endLine":1,"endColumn":26},{"ruleId":"34","severity":1,"message":"38","line":4,"column":11,"nodeType":"36","messageId":"37","endLine":4,"endColumn":20},{"ruleId":"34","severity":1,"message":"39","line":11,"column":11,"nodeType":"36","messageId":"37","endLine":11,"endColumn":23},{"ruleId":"34","severity":1,"message":"40","line":14,"column":11,"nodeType":"36","messageId":"37","endLine":14,"endColumn":29},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'buyWorker' is assigned a value but never used.","'miningWorker' is assigned a value but never used.","'upgradeWorkerSpeed' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]