[{"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/index.js":"1","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/App.js":"2","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/WorkerList.js":"3","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/Worker.js":"4","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/misc.js":"5","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/MultiplierList.js":"6","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/Multiplier.js":"7","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/hooks/useWorker.js":"8"},{"size":197,"mtime":1618529388000,"results":"9","hashOfConfig":"10"},{"size":811,"mtime":1618674117000,"results":"11","hashOfConfig":"10"},{"size":408,"mtime":1618673761000,"results":"12","hashOfConfig":"10"},{"size":2895,"mtime":1618719891000,"results":"13","hashOfConfig":"10"},{"size":1572,"mtime":1618529388000,"results":"14","hashOfConfig":"10"},{"size":553,"mtime":1618719891000,"results":"15","hashOfConfig":"10"},{"size":416,"mtime":1618674181000,"results":"16","hashOfConfig":"10"},{"size":710,"mtime":1618719891000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7tgfm0",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/index.js",[],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/App.js",["38"],"import React, { useEffect, useState, useMemo } from \"react\";\nimport WorkerList from \"./components/WorkerList\"\n\nimport \"./css/App.css\";\nimport MultiplierList from \"./components/MultiplierList\";\n\nfunction App() {\n  // set everything back to default values based on local save\n  const [money, setMoney] = useState(10\n    // JSON.parse(localStorage.getItem(\"CoalMiner.money\")) || 10\n  );\n  const [multiplier, setMultiplier] = useState(1);\n  // for saving money\n  useEffect(() => {\n    localStorage.setItem(\"CoalMiner.money\", JSON.stringify(money))\n  }, [money])\n\n  return (\n    <>\n      <h1>Coal Miners</h1>\n      <h2>Current Money: {money}</h2>\n      <WorkerList money={money} setMoney={setMoney} multiplier={multiplier} />\n      <MultiplierList setMultiplier={setMultiplier} />\n    </>\n  );\n}\n\nexport default App;",["39","40"],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/WorkerList.js",[],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/Worker.js",["41"],"import React, {useEffect, useState} from 'react';\nimport useWorker from \"../hooks/useWorker\";\n\nexport default function Worker({worker, money, setMoney, multiplier}) {\n    const miningSpeed = 10000;\n    const [visible, setVisible] = useState(true);\n    const [ \n        owned, setOwned, \n        cost, setCost, \n        productionRate, setProductionRate, \n        productionRateUpgradeCost, setProductionRateUpgradeCost] = useWorker(worker)\n    const buyWorker = () => {\n        // check if there is enough money\n        const totalCost = cost * multiplier;\n        if (money < totalCost) return;\n        // if there is subtract from funds\n        setMoney(prevMoney => prevMoney - totalCost);\n        // adjust the stats accoringly\n        setOwned(prevOwned => prevOwned + multiplier);\n        setCost(prevCost => prevCost + multiplier);\n    };\n    // upgrade the workers production rate\n    const upgradeWorker = () => {\n        if (productionRateUpgradeCost > money) return;\n        setMoney(prevMoney => prevMoney - productionRateUpgradeCost);\n        setProductionRate(prevProductionRate => prevProductionRate + 1);\n        setProductionRateUpgradeCost(prevProductionRateUpgradeCost => prevProductionRateUpgradeCost * 2);\n    };\n    // the functoin for whenever our worker mines\n    const miningWorker = () => {\n        setMoney(prevMoney => prevMoney + owned * productionRate);\n    };\n    // restart the mining function whenever we buy another miner\n    useEffect(() => {\n        setInterval(() => miningWorker(worker), miningSpeed)\n    }, [owned])\n    const reveal = () => {\n        setVisible(prevVisible => !prevVisible)\n    }\n    return (\n        <div className=\"worker\">\n            <h2 className=\"worker-name\">{worker.name}</h2>\n            <div className={ visible ? \"visible\" : \"hidden\"}>\n                <h2>Owned: <span>{owned}</span></h2>\n                <h2>Cost: <span>{cost * multiplier}</span>$</h2>\n                <h2>Production Rate: <span>{productionRate}</span>$</h2>\n                <h2>Upgrade Cost: <span>{productionRateUpgradeCost}</span></h2>\n                <button onClick={() => buyWorker()}>Buy <span>{multiplier}</span>?</button>\n                <button onClick={() => upgradeWorker()}>Upgrade?</button>\n            </div>\n            <div>\n                <button \n                    tabIndex=\"0\"\n                    style={{\n                        display: visible ? \"block\" : \"none\",\n                    }}\n                    onClick={() => reveal()}\n                >\n                    Minimize\n                </button>\n                <button \n                    tabIndex=\"0\"\n                    style={{\n                        display: visible ? \"none\" : \"block\",\n                    }}\n                    onClick={() => reveal()}\n                >\n                    Reveal\n                </button>\n            </div>\n        </div>\n    )\n}\n","/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/misc.js",[],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/MultiplierList.js",[],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/components/Multiplier.js",[],"/Users/jacobshomali/Documents/GitHub/coal-miner-fixed/src/hooks/useWorker.js",["42"],"import {useEffect, useState} from \"react\";\n// take worker and returns a usestate form of the workers rendered variables\nexport default function useWorker(worker) {\n    const [owned, setOwned] = useState(worker.owned);\n    const [productionRate, setProductionRate] = useState(worker.productionRate);\n    const [productionRateUpgradeCost, setProductionRateUpgradeCost] = useState(worker.productionRateUpgradeCost);\n    const [cost, setCost] = useState(worker.cost);\n    useEffect(() => {\n        worker.save()\n    }, [owned, cost, productionRate, productionRateUpgradeCost])\n    return [owned, setOwned, cost, setCost, productionRate, setProductionRate, productionRateUpgradeCost, setProductionRateUpgradeCost]\n}",{"ruleId":"43","severity":1,"message":"44","line":1,"column":38,"nodeType":"45","messageId":"46","endLine":1,"endColumn":45},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":53,"column":8,"nodeType":"53","endLine":53,"endColumn":15,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"55","line":10,"column":8,"nodeType":"53","endLine":10,"endColumn":64,"suggestions":"56"},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setMoney'. Either include it or remove the dependency array. If 'setMoney' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["59"],"React Hook useEffect has a missing dependency: 'worker'. Either include it or remove the dependency array.",["60"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},"Update the dependencies array to be: [setMoney, state]",{"range":"65","text":"66"},"Update the dependencies array to be: [owned, cost, productionRate, productionRateUpgradeCost, worker]",{"range":"67","text":"68"},[1752,1759],"[setMoney, state]",[515,571],"[owned, cost, productionRate, productionRateUpgradeCost, worker]"]